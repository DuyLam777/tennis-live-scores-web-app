@page "/courts"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@using TennisApp.WebSockets
@using TennisApp.Models
@using Microsoft.EntityFrameworkCore
@using System.Net.Http.Json
@using System.Text
@inject TennisApp.Data.TennisAppContext DB
@inject WebSocketHandler WebSocketHandler
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IDisposable

<PageTitle>Tennis Courts</PageTitle>

<link rel="stylesheet" href="css/court-pages.css" />

<div class="page-container">
    @if (showToast)
    {
        <div class="toast-container">
            <div class="toast @(toastIsError ? "toast-error" : "toast-success")" role="alert">
                <div class="d-flex">
                    <div class="me-2">
                        <i class="oi @(toastIsError ? "oi-warning" : "oi-check")"></i>
                    </div>
                    <div>
                        @toastMessage
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="header d-flex justify-content-between align-items-center">
        <h1><i class="oi oi-map-marker me-2"></i>Tennis Courts</h1>
        <div>
            <a href="courts/create" class="btn btn-primary">
                <i class="oi oi-plus me-1"></i> Add Court
            </a>
        </div>
    </div>

    <div class="dashboard-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3 class="mb-0">Court Availability Dashboard</h3>
            <div>
                <span class="me-3">
                    <span class="status-indicator status-available"></span>
                    Available: @courts.Count(c => !c.IsOccupied)
                </span>
                <span>
                    <span class="status-indicator status-occupied"></span>
                    In Use: @courts.Count(c => c.IsOccupied)
                </span>
            </div>
        </div>

        <div class="court-grid">
            @foreach (var court in courts)
            {
                <div class="card court-card @(court.IsOccupied ? "court-occupied" : "court-available")">
                    <div class="card-header @(court.IsOccupied ? "court-header-occupied" : "court-header-available")">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">@court.Name</h4>
                            <span class="badge @(court.IsOccupied ? "badge-occupied" : "badge-available")">
                                @(court.IsOccupied ? "In Use" : "Available")
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="court-info">
                            <span class="court-type">@(court.IsIndoor ? "Indoor" : "Outdoor")</span>
                            <a href="@($"courts/details?id={court.Id}")" class="btn btn-secondary btn-sm">
                                <i class="oi oi-info">Details</i>
                            </a>
                        </div>

                        <button class="btn @(court.IsOccupied ? "btn-success" : "btn-danger") w-100"
                            @onclick="async () => await ToggleCourtStatus(court.Id)">
                            @(court.IsOccupied ? "Mark Available" : "Mark In Use")
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="dashboard-section">
        <h3 class="mb-3">Courts Management</h3>
        <div class="table-container">
            <QuickGrid Items="@(courts.AsQueryable())" Class="quick-grid">
                <PropertyColumn Property="@(court => court.Id)" Title="ID" Sortable="true" />
                <PropertyColumn Property="@(court => court.Name)" Title="Court Name" Sortable="true" />
                <TemplateColumn Title="Status" Sortable="true">
                    <div class="court-status">
                        <span
                            class="status-indicator @(context.IsOccupied ? "status-occupied" : "status-available")"></span>
                        @(context.IsOccupied ? "In Use" : "Available")
                    </div>
                </TemplateColumn>
                <PropertyColumn Property="@(court => court.IsIndoor ? "Indoor" : "Outdoor")" Title="Type" />
                <TemplateColumn Title="Actions">
                    <div class="d-flex">
                        <a href="@($"courts/edit?id={context.Id}")" class="btn btn-primary btn-sm action-button">
                            <i class="oi oi-pencil me-1"></i> Edit
                        </a>
                        <button @onclick="async () => await DeleteCourt(context.Id)"
                            class="btn btn-danger btn-sm action-button">
                            <i class="oi oi-trash me-1"></i> Delete
                        </button>
                    </div>
                </TemplateColumn>
            </QuickGrid>
        </div>
    </div>
</div>

@code {
    private List<Court> courts = new();
    private bool showToast = false;
    private string toastMessage = "";
    private bool toastIsError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourtsAsync();

        // Subscribe to WebSocket events for real-time updates
        WebSocketHandler.RegisterForWebSocketUpdates(this);
    }

    private async Task LoadCourtsAsync()
    {
        try
        {
            // Use the API controller to get the courts
            var response = await Http.GetFromJsonAsync<List<Court>>("/api/Courts");
            if (response != null)
            {
                courts = response;
            }
        }
        catch (Exception)
        {
            // Fallback to direct DB query if API fails
            courts = await DB.Court.AsNoTracking().ToListAsync();
        }
    }

    // This method can be called by the WebSocketHandler when court availability changes
    public async Task RefreshFromWebSocketEvent()
    {
        await InvokeAsync(async () =>
        {
            await LoadCourtsAsync();
            StateHasChanged();
        });
    }

    private async Task ToggleCourtStatus(int courtId)
    {
        try
        {
            // Create an empty HttpContent object
            HttpContent content = new StringContent("", Encoding.UTF8, "application/json");

            // Use the API controller to toggle the occupation status
            var response = await Http.PatchAsync($"/api/Courts/{courtId}/toggleOccupation", content);

            if (response.IsSuccessStatusCode)
            {
                ShowToast("Court status updated successfully", false);
            }
            else
            {
                ShowToast($"Error updating court status: {response.ReasonPhrase}", true);

                // Fallback to direct DB update if API fails
                await FallbackToggleCourtStatus(courtId);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error updating court status: {ex.Message}", true);

            // Fallback to direct DB update if API fails
            await FallbackToggleCourtStatus(courtId);
        }
    }

    private async Task FallbackToggleCourtStatus(int courtId)
    {
        try
        {
            var court = await DB.Court.FindAsync(courtId);
            if (court != null)
            {
                court.IsOccupied = !court.IsOccupied;
                await DB.SaveChangesAsync();
                await WebSocketHandler.BroadcastCourtAvailabilityAsync();
                await LoadCourtsAsync();
                ShowToast("Court status updated (fallback method)", false);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error in fallback update: {ex.Message}", true);
        }
    }

    private async Task DeleteCourt(int courtId)
    {
        try
        {
            // Ask for confirmation before deleting
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this court?");

            if (confirmed)
            {
                // Use the API controller to delete the court
                var response = await Http.DeleteAsync($"/api/Courts/{courtId}");

                if (response.IsSuccessStatusCode)
                {
                    ShowToast("Court deleted successfully", false);
                }
                else
                {
                    ShowToast($"Error deleting court: {response.ReasonPhrase}", true);

                    // Fallback to direct DB delete if API fails
                    await FallbackDeleteCourt(courtId);
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting court: {ex.Message}", true);

            // Fallback to direct DB delete if API fails
            await FallbackDeleteCourt(courtId);
        }
    }

    private async Task FallbackDeleteCourt(int courtId)
    {
        try
        {
            var court = await DB.Court.FindAsync(courtId);
            if (court != null)
            {
                DB.Court.Remove(court);
                await DB.SaveChangesAsync();
                await WebSocketHandler.BroadcastCourtAvailabilityAsync();
                await LoadCourtsAsync();
                ShowToast("Court deleted (fallback method)", false);
            }
        }
        catch (Exception ex)
        {
            ShowToast($"Error in fallback delete: {ex.Message}", true);
        }
    }

    private void ShowToast(string message, bool isError)
    {
        toastMessage = message;
        toastIsError = isError;
        showToast = true;

        // Hide the toast after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            await InvokeAsync(() =>
    {
            showToast = false;
            StateHasChanged();
        });
        });
    }

    public void Dispose()
    {
        // Unsubscribe from WebSocket events
        WebSocketHandler.UnregisterFromWebSocketUpdates(this);
    }
}