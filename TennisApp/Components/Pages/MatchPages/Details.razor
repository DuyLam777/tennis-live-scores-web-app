@page "/matches/details/{Id:int}"
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@using TennisApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@implements IDisposable

<PageTitle>Match Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Match</h4>
    <hr />
    @if (match is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Id</dt>
            <dd class="col-sm-10">@match.Id</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Player 1</dt>
            <dd class="col-sm-10">@match.Player1?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Player 2</dt>
            <dd class="col-sm-10">@match.Player2?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Match Time</dt>
            <dd class="col-sm-10">@match.MatchTime.ToString("g")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Court</dt>
            <dd class="col-sm-10">@match.Court?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Scoreboard</dt>
            <dd class="col-sm-10">@match.ScoreboardId</dd>
        </dl>
        <div>
            <a href="/matches/edit/@match.Id" class="btn btn-primary">Edit</a> |
            <a href="/matches/delete/@match.Id" class="btn btn-danger">Delete</a> |
            <a href="/matches" class="btn btn-secondary">Back to List</a>
        </div>
    }
</div>

@code {
    private Match? match;
    private TennisApp.Data.TennisAppContext? dbContext;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dbContext = await DbContextFactory.CreateDbContextAsync();
        
        match = await dbContext.Match
            .Include(m => m.Court)
            .Include(m => m.Player1)
            .Include(m => m.Player2)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (match is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }
    
    public void Dispose()
    {
        dbContext?.Dispose();
    }
}