@page "/matches/details/{Id:int}"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using TennisApp.Models
@using TennisApp.DTOs
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Match Details</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (match == null)
{
    <div class="alert alert-danger">
        <h4>Match not found.</h4>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p>@errorMessage</p>
        }
        <a href="/matches" class="btn btn-primary mt-3">Back to Matches</a>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Match Details</h1>
            <div>
                <a href="/matches/edit/@match.Id" class="btn btn-primary me-2">Edit</a>
                <a href="/matches" class="btn btn-outline-secondary">Back</a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Match Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <dl>
                                    <dt>Match ID</dt>
                                    <dd>@match.Id</dd>

                                    <dt>Date & Time</dt>
                                    <dd>@match.MatchTime.ToString("g")</dd>

                                    <dt>Court</dt>
                                    <dd>@match.CourtName</dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <dl>
                                    <dt>Tournament</dt>
                                    <dd>
                                        @if (match.TournamentId.HasValue)
                                        {
                                            <a href="/tournaments/details/@match.TournamentId">
                                                @(tournamentName ?? "Tournament Details")
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not part of a tournament</span>
                                        }
                                    </dd>

                                    <dt>Scoreboard ID</dt>
                                    <dd>@match.ScoreboardId</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Players</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-5">
                                <div class="player-card p-3 border">
                                    @if (!string.IsNullOrEmpty(match.Player1Name))
                                    {
                                        <div class="display-6">@match.Player1Name</div>
                                        <div>
                                            <a href="/players/details/@match.Player1Id" class="btn btn-sm btn-outline-primary mt-2">View Profile</a>
                                        </div>
                                        @if (IsWinner(match.Player1Id))
                                        {
                                            <div class="mt-2">
                                                <span class="badge bg-success">Winner <i class="bi bi-trophy-fill text-warning ms-1"></i></span>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-muted">Player 1 not assigned</div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-2 d-flex align-items-center justify-content-center">
                                <div class="display-6">VS</div>
                            </div>
                            <div class="col-md-5">
                                <div class="player-card p-3 border">
                                    @if (!string.IsNullOrEmpty(match.Player2Name))
                                    {
                                        <div class="display-6">@match.Player2Name</div>
                                        <div>
                                            <a href="/players/details/@match.Player2Id" class="btn btn-sm btn-outline-primary mt-2">View Profile</a>
                                        </div>
                                        @if (IsWinner(match.Player2Id))
                                        {
                                            <div class="mt-2">
                                                <span class="badge bg-success">Winner <i class="bi bi-trophy-fill text-warning ms-1"></i></span>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-muted">Player 2 not assigned</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (match.Sets != null && match.Sets.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Scoreboard</h5>
                            <button class="btn btn-sm btn-success" @onclick="() => showScoreModal = true">
                                <i class="bi bi-pencil"></i> Update Score
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr class="bg-light">
                                            <th>Set</th>
                                            <th>@match.Player1Name</th>
                                            <th>@match.Player2Name</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var set in match.Sets.OrderBy(s => s.SetNumber))
                                        {
                                            <tr>
                                                <td>Set @set.SetNumber</td>
                                                <td>@set.Player1Games</td>
                                                <td>@set.Player2Games</td>
                                                <td>
                                                    @if (set.IsCompleted)
                                                    {
                                                        <span class="badge bg-success">Complete</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-warning">In Progress</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Scoreboard</h5>
                            <button class="btn btn-sm btn-success" @onclick="AddNewSet">
                                <i class="bi bi-plus"></i> Create Scoreboard
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-info">
                                No scoreboard has been created for this match yet.
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Match Statistics</h5>
                    </div>
                    <div class="card-body">
                        @if (match.Sets != null && match.Sets.Any())
                        {
                            <div>
                                <h6>Sets Won</h6>
                                <div class="row text-center mb-3">
                                    <div class="col-6">
                                        <div class="display-4">@GetSetsWon(match.Player1Id)</div>
                                        <div>@match.Player1Name</div>
                                    </div>
                                    <div class="col-6">
                                        <div class="display-4">@GetSetsWon(match.Player2Id)</div>
                                        <div>@match.Player2Name</div>
                                    </div>
                                </div>

                                <h6>Total Games</h6>
                                <div class="progress mb-3" style="height: 25px;">
                                    @{
                                        var player1Games = GetTotalGames(match.Player1Id);
                                        var player2Games = GetTotalGames(match.Player2Id);
                                        var totalGames = player1Games + player2Games;
                                        var player1Percentage = totalGames > 0 ? (player1Games * 100 / totalGames) : 50;
                                        var player2Percentage = totalGames > 0 ? (player2Games * 100 / totalGames) : 50;
                                    }
                                    <div class="progress-bar bg-primary" role="progressbar" 
                                        style="width: @player1Percentage%">
                                        @player1Games
                                    </div>
                                    <div class="progress-bar bg-success" role="progressbar" 
                                        style="width: @player2Percentage%">
                                        @player2Games
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                Match statistics will be available once sets have been recorded.
                            </div>
                        }
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/matches/edit/@match.Id" class="btn btn-primary">
                                <i class="bi bi-pencil"></i> Edit Match
                            </a>
                            @if (match.Sets != null && match.Sets.Any())
                            {
                                <button class="btn btn-success" @onclick="() => showScoreModal = true">
                                    <i class="bi bi-clipboard-data"></i> Update Score
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick="AddNewSet">
                                    <i class="bi bi-plus-circle"></i> Create Scoreboard
                                </button>
                            }
                            <button class="btn btn-info" @onclick="GenerateShareLink" type="button">
                                <i class="bi bi-link"></i> Share Match
                            </button>
                            <button class="btn btn-danger" @onclick="() => showDeleteModal = true">
                                <i class="bi bi-trash"></i> Delete Match
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (showShareModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Share Match</h5>
                    <button type="button" class="btn-close" @onclick="() => { showShareModal = false; StateHasChanged(); }"></button>
                </div>
                <div class="modal-body">
                    <p>Share this link to allow others to view this match:</p>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" readonly value="@shareUrl" @ref="shareUrlInput" />
                        <button class="btn btn-outline-primary" @onclick="CopyShareLink" type="button">
                            <i class="bi bi-clipboard"></i> Copy
                        </button>
                    </div>
                    @if (linkCopied)
                    {
                        <div class="alert alert-success">Link copied to clipboard!</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => { showShareModal = false; StateHasChanged(); }">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this match?</p>
                    @if (match?.Sets != null && match.Sets.Any())
                    {
                        <div class="alert alert-warning">
                            This match has @match.Sets.Count associated sets that will also be deleted.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteModal = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showScoreModal && match != null)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Score</h5>
                    <button type="button" class="btn-close" @onclick="CloseScoreModal"></button>
                </div>
                <div class="modal-body">
                    @if (updatedMatch?.Sets != null)
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Set</th>
                                        <th>@match.Player1Name</th>
                                        <th>@match.Player2Name</th>
                                        <th>Status</th>
                                        <th>Winner</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var set in updatedMatch.Sets.OrderBy(s => s.SetNumber))
                                    {
                                        <tr>
                                            <td>Set @set.SetNumber</td>
                                            <td>
                                                <input type="number" min="0" class="form-control" 
                                                    @bind-value="set.Player1Games"
                                                    @bind-value:event="oninput" 
                                                    @onblur="() => UpdateGamesAndAutoSetWinner(set)" />
                                            </td>
                                            <td>
                                                <input type="number" min="0" class="form-control" 
                                                    @bind-value="set.Player2Games"
                                                    @bind-value:event="oninput" 
                                                    @onblur="() => UpdateGamesAndAutoSetWinner(set)" />
                                            </td>
                                            <td>
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" type="checkbox" 
                                                        @bind-value="set.IsCompleted"
                                                        @bind-value:after="() => AutoSetWinner(set)"
                                                        id="set-@set.Id-status" />
                                                    <label class="form-check-label" for="set-@set.Id-status">
                                                        @(set.IsCompleted ? "Complete" : "In Progress")
                                                    </label>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    @if (set.IsCompleted)
                                                    {
                                                        @if (set.WinnerId == match.Player1Id)
                                                        {
                                                            <span class="badge bg-primary">@match.Player1Name</span>
                                                        }
                                                        else if (set.WinnerId == match.Player2Id)
                                                        {
                                                            <span class="badge bg-success">@match.Player2Name</span>
                                                        }
                                                        else if (set.Player1Games == set.Player2Games)
                                                        {
                                                            <span class="badge bg-warning">Tie</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">Not set</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Set not complete</span>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="d-flex justify-content-center mt-3">
                            <button class="btn btn-success" @onclick="AddNewSet">
                                <i class="bi bi-plus-circle"></i> Add New Set
                            </button>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseScoreModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateScore">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private MatchDetailDto? match;
    private UpdateMatchDto? updatedMatch;
    private string? tournamentName;
    private bool isLoading = true;
    private string? errorMessage;

    private bool showShareModal = false;
    private bool showDeleteModal = false;
    private bool showScoreModal = false;
    private bool linkCopied = false;
    private string shareUrl = "";
    private ElementReference shareUrlInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadMatch();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            await LoadMatch();
        }
    }

    private async Task LoadMatch()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() },
                ReferenceHandler = ReferenceHandler.Preserve
            };

            match = await HttpClient.GetFromJsonAsync<MatchDetailDto>($"api/Matches/{Id}", options);

            if (match != null && match.TournamentId.HasValue)
            {
                // Get tournament name if needed
                try
                {
                    var tournament = await HttpClient.GetFromJsonAsync<TournamentDetailDto>($"api/Tournament/{match.TournamentId}", options);
                    if (tournament != null)
                    {
                        tournamentName = tournament.Name;
                    }
                }
                catch
                {
                    // If we can't get tournament, just use null name
                }
            }

            // Create a copy for editing
            if (match != null)
            {
                updatedMatch = new UpdateMatchDto
                {
                    Id = match.Id,
                    MatchTime = match.MatchTime,
                    CourtId = match.CourtId,
                    Player1Id = match.Player1Id,
                    Player2Id = match.Player2Id,
                    ScoreboardId = match.ScoreboardId,
                    TournamentId = match.TournamentId,
                    Sets = match.Sets?.Select(s => new SetDto
                    {
                        Id = s.Id,
                        SetNumber = s.SetNumber,
                        Player1Games = s.Player1Games,
                        Player2Games = s.Player2Games,
                        IsCompleted = s.IsCompleted,
                        WinnerId = s.WinnerId,
                        StartTime = s.StartTime,
                        EndTime = s.EndTime,
                        // Create a new Games list instead of copying reference
                        Games = new List<GameDto>()
                    }).ToList() ?? new List<SetDto>()
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading match: {ex.Message}";
            match = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsWinner(int playerId)
    {
        if (match?.Sets == null || !match.Sets.Any()) return false;
        
        // Only show winner if all sets are completed (match is over)
        bool isMatchCompleted = match.Sets.All(s => s.IsCompleted);
        if (!isMatchCompleted) return false;
        
        // Determine match winner based on sets won
        int player1SetsWon = GetSetsWon(match.Player1Id);
        int player2SetsWon = GetSetsWon(match.Player2Id);
        
        // Get the total number of sets needed to win (best of 3 or best of 5)
        int setsToWin = match.Sets.Count <= 3 ? 2 : 3;
        
        // Only show winner if one player has reached the required number of sets to win
        if (player1SetsWon >= setsToWin && playerId == match.Player1Id)
            return true;
        else if (player2SetsWon >= setsToWin && playerId == match.Player2Id)
            return true;
            
        return false;
    }
    
    private int GetSetsWon(int playerId)
    {
        if (match?.Sets == null || !match.Sets.Any()) return 0;
        
        int setsWon = 0;
        
        foreach (var set in match.Sets.Where(s => s.IsCompleted))
        {
            if (playerId == match.Player1Id && set.Player1Games > set.Player2Games)
                setsWon++;
            else if (playerId == match.Player2Id && set.Player2Games > set.Player1Games)
                setsWon++;
        }
        
        return setsWon;
    }
    
    private void UpdateGamesAndAutoSetWinner(SetDto set)
    {
        // If the set is completed, auto-update the winner when games change
        if (set.IsCompleted)
        {
            AutoSetWinner(set);
        }
    }    
    
    private void AutoSetWinner(SetDto set)
    {
        if (set.IsCompleted && match != null)
        {
            // Auto-set the winner based on games won
            if (set.Player1Games > set.Player2Games)
            {
                set.WinnerId = match.Player1Id;
            }
            else if (set.Player2Games > set.Player1Games)
            {
                set.WinnerId = match.Player2Id;
            }
            else
            {
                // If tied, still set the winner to null
                set.WinnerId = null;
            }
        }
        else if (!set.IsCompleted)
        {
            // If the set is not completed, clear the winner
            set.WinnerId = null;
        }
    }
    
    private int GetTotalGames(int playerId)
    {
        if (match?.Sets == null || !match.Sets.Any()) return 0;
        
        int totalGames = 0;
        
        foreach (var set in match.Sets)
        {
            if (playerId == match.Player1Id)
                totalGames += set.Player1Games;
            else if (playerId == match.Player2Id)
                totalGames += set.Player2Games;
        }
        
        return totalGames;
    }
    
    private void GenerateShareLink()
    {
        var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
        shareUrl = $"{baseUrl}/matches/details/{Id}";
        showShareModal = true;
        linkCopied = false;
    }

    private async Task CopyShareLink()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);
        linkCopied = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/Matches/{Id}");

            if (response.IsSuccessStatusCode)
            {
                showDeleteModal = false;
                NavigationManager.NavigateTo("/matches");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error deleting match: {response.StatusCode} - {errorContent}";
                showDeleteModal = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting match: {ex.Message}";
            showDeleteModal = false;
        }
    }

    private async Task AddNewSet()
    {
        try
        {
            // If we're in the score modal, preserve the current values of existing sets
            var existingSetValues = new Dictionary<int, (int player1Games, int player2Games, bool isCompleted, int? winnerId)>();
            
            if (showScoreModal && updatedMatch?.Sets != null)
            {
                foreach (var set in updatedMatch.Sets)
                {
                    if (set.Id > 0) // Only preserve sets that already exist on the server
                    {
                        existingSetValues[set.Id] = (set.Player1Games, set.Player2Games, set.IsCompleted, set.WinnerId);
                    }
                }
            }
            
            // Create a new set via API
            var response = await HttpClient.PostAsync($"api/Matches/{Id}/sets", null);
            
            if (response.IsSuccessStatusCode)
            {
                // Reload match to get the new set
                await LoadMatch();
                
                // If score modal is open, restore previous values and add the new set
                if (showScoreModal && updatedMatch != null && match != null)
                {
                    var newSets = new List<SetDto>();
                    
                    // Copy all sets from the match, preserving user edits for existing sets
                    foreach (var s in match.Sets)
                    {
                        var newSet = new SetDto
                        {
                            Id = s.Id,
                            SetNumber = s.SetNumber,
                            StartTime = s.StartTime,
                            EndTime = s.EndTime,
                            Games = new List<GameDto>()
                        };
                        
                        // If this is an existing set with user edits, use those values
                        if (existingSetValues.TryGetValue(s.Id, out var values))
                        {
                            newSet.Player1Games = values.player1Games;
                            newSet.Player2Games = values.player2Games;
                            newSet.IsCompleted = values.isCompleted;
                            newSet.WinnerId = values.winnerId;
                        }
                        else
                        {
                            // Otherwise use the values from the database
                            newSet.Player1Games = s.Player1Games;
                            newSet.Player2Games = s.Player2Games;
                            newSet.IsCompleted = s.IsCompleted;
                            newSet.WinnerId = s.WinnerId;
                        }
                        
                        newSets.Add(newSet);
                    }
                    
                    // Update the sets in updatedMatch
                    updatedMatch.Sets = newSets;
                    
                    // Force UI refresh
                    StateHasChanged();
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error adding set: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding set: {ex.Message}";
        }
    }

    private void CloseScoreModal()
    {
        // Reset the updated match to match the current match
        if (match != null)
        {
            updatedMatch = new UpdateMatchDto
            {
                Id = match.Id,
                MatchTime = match.MatchTime,
                CourtId = match.CourtId,
                Player1Id = match.Player1Id,
                Player2Id = match.Player2Id,
                ScoreboardId = match.ScoreboardId,
                TournamentId = match.TournamentId,
                Sets = match.Sets?.Select(s => new SetDto
                {
                    Id = s.Id,
                    SetNumber = s.SetNumber,
                    Player1Games = s.Player1Games,
                    Player2Games = s.Player2Games,
                    IsCompleted = s.IsCompleted,
                    WinnerId = s.WinnerId,
                    StartTime = s.StartTime,
                    EndTime = s.EndTime,
                    // Create a new Games list instead of copying reference
                    Games = new List<GameDto>()
                }).ToList() ?? new List<SetDto>()
            };
        }
        
        showScoreModal = false;
    }

    private async Task UpdateScore()
    {
        if (updatedMatch != null)
        {
            try
            {
                // Auto-set winners based on scores for all completed sets
                foreach (var set in updatedMatch.Sets.Where(s => s.IsCompleted))
                {
                    // Only auto-set if not already set
                    if (set.WinnerId == null || set.WinnerId == 0)
                    {
                        if (set.Player1Games > set.Player2Games)
                        {
                            set.WinnerId = match?.Player1Id;
                        }
                        else if (set.Player2Games > set.Player1Games)
                        {
                            set.WinnerId = match?.Player2Id;
                        }
                        // If tied, leave as null
                    }
                }

                // Log what we're sending to help with debugging
                Console.WriteLine($"Updating match {Id} with {updatedMatch.Sets.Count} sets");
                foreach (var set in updatedMatch.Sets)
                {
                    Console.WriteLine($"Set {set.SetNumber}: P1={set.Player1Games}, P2={set.Player2Games}, Completed={set.IsCompleted}, Winner={set.WinnerId}");
                }

                var response = await HttpClient.PutAsJsonAsync($"api/Matches/{Id}", updatedMatch);

                if (response.IsSuccessStatusCode)
                {
                    showScoreModal = false;
                    await LoadMatch();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Error updating score: {response.StatusCode} - {errorContent}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error updating score: {ex.Message}";
            }
        }
    }
}