@page "/matches"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@using Microsoft.EntityFrameworkCore
@using TennisApp.Data
@using TennisApp.Models
@implements IDisposable

<PageTitle>Matches</PageTitle>
<link rel="stylesheet" href="css/matches-page.css">

<div class="page-container">
    <div class="header">
        <h1>All Matches</h1>
    </div>

    <div class="actions-container">
        <div class="search-bar">
            <input type="text" @bind="searchQuery" @bind:event="oninput" @onkeyup="HandleSearch" placeholder="Search by player name..." />
        </div>
        <a href="/matches/create" class="btn btn-primary">Create New Match</a>
    </div>

    @if (isLoading)
    {
        <p><em>Loading matches...</em></p>
    }
    else
    {
        <div class="match-grid">
            @foreach (var match in filteredMatches)
            {
                <div class="match-card @GetMatchStatusClass(match)">
                    <div class="match-card-header">
                        <div class="match-time">@match.MatchTime.ToString("MMM dd, HH:mm")</div>
                        <div class="match-location">@(match.Court?.Name ?? "Court TBD")</div>
                    </div>
                    <div class="player player-top">
                        <div class="player-info">
                            <div class="player-name">@(match.Player1?.Name ?? "Player 1")</div>
                            @if (match.Player1 != null && !string.IsNullOrEmpty(match.Player1.Country))
                            {
                                <div class="player-country">@match.Player1.Country</div>
                            }
                        </div>
                        @if (HasSets(match))
                        {
                            <div class="player-score">
                                @foreach (var set in GetMatchSets(match))
                                {
                                    <span class="set-score">@set.Player1Games</span>
                                }
                            </div>
                        }
                    </div>
                    <div class="match-vs">VS</div>
                    <div class="player player-bottom">
                        <div class="player-info">
                            <div class="player-name">@(match.Player2?.Name ?? "Player 2")</div>
                            @if (match.Player2 != null && !string.IsNullOrEmpty(match.Player2.Country))
                            {
                                <div class="player-country">@match.Player2.Country</div>
                            }
                        </div>
                        @if (HasSets(match))
                        {
                            <div class="player-score">
                                @foreach (var set in GetMatchSets(match))
                                {
                                    <span class="set-score">@set.Player2Games</span>
                                }
                            </div>
                        }
                    </div>
                    <div class="match-footer">
                        @{
                            var matchStatus = GetMatchStatus(match);
                        }
                        <div class="match-status @(matchStatus == "LIVE" ? "status-live" : matchStatus == "Completed" ? "completed-status" : "")">
                            @GetMatchStatus(match)
                        </div>
                        <div class="match-actions">
                            <a href="/matches/edit/@match.Id" class="action-button edit-btn">Edit</a>
                            <a href="/matches/details/@match.Id" class="action-button details-btn">Details</a>
                            <a href="/matches/delete/@match.Id" class="action-button delete-btn">Delete</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (!filteredMatches.Any() || filteredMatches == null)
        {
            <div class="no-results">
                <p>No matches found. Try a different search term.</p>
            </div>
        }
    }
</div>

@code {
    private TennisAppContext dbContext = null!;
    private IQueryable<Match> matchesQuery = null!;
    private List<Match> filteredMatches = new List<Match>();
    private bool isLoading = true;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();
        
        // Create the query
        matchesQuery = dbContext.Match
            .Include(m => m.Court)
            .Include(m => m.Player1)
            .Include(m => m.Player2)
            .Include(m => m.Sets)
            .AsQueryable();
            
        filteredMatches = await matchesQuery.ToListAsync();
        isLoading = false;
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredMatches = await matchesQuery.ToListAsync();
        }
        else
        {
            string query = searchQuery.ToLower();
            filteredMatches = await matchesQuery
                .Where(m => 
                    (m.Player1 != null && m.Player1.Name != null && m.Player1.Name.ToLower().Contains(query)) || 
                    (m.Player2 != null && m.Player2.Name != null && m.Player2.Name.ToLower().Contains(query)))
                .ToListAsync();
        }
    }

    public void Dispose()
    {
        // Make sure to dispose the context when the component is disposed
        dbContext?.Dispose();
    }

    private string GetMatchStatus(Match match)
    {
        // Use similar logic to Dashboard.razor
        var currentTime = DateTime.Now;
        
        if (IsMatchCompleted(match))
            return "Completed";
        else if (IsMatchLive(match))
            return "LIVE";
        else if (match.MatchTime > currentTime)
            return "Upcoming";
        else
            return "Starting soon";
    }

    private string GetMatchStatusClass(Match match)
    {
        // Return CSS class based on match status
        var status = GetMatchStatus(match);
        
        if (status == "Completed")
            return "completed";
        else if (status == "LIVE" || status == "Starting soon")
            return "ongoing";
        else
            return "upcoming";
    }
    
    private bool IsMatchCompleted(Match match)
    {
        // Similar to Dashboard.razor IsMatchCompleted method
        if (match.Sets == null || !match.Sets.Any())
            return false;

        // Check if all sets are completed first
        if (match.Sets.Any(s => !s.IsCompleted))
            return false;

        // Count wins for each player
        int? player1Id = match.Player1?.Id;
        int? player2Id = match.Player2?.Id;

        int player1Wins = match.Sets.Count(s => s.WinnerId == player1Id);
        int player2Wins = match.Sets.Count(s => s.WinnerId == player2Id);

        // Match is completed if either player has at least 2 set wins
        return player1Wins >= 2 || player2Wins >= 2;
    }
    
    private bool IsMatchLive(Match match)
    {
        // Similar to Dashboard.razor IsMatchLive method
        return match.Sets != null && match.Sets.Any(s => !s.IsCompleted);
    }
    
    private bool HasSets(Match match)
    {
        return match.Sets != null && match.Sets.Any();
    }
    
    private IEnumerable<Set> GetMatchSets(Match match)
    {
        return match.Sets ?? Enumerable.Empty<Set>();
    }
}