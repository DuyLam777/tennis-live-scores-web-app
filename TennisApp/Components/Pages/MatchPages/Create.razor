@page "/matches/create"
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@inject NavigationManager NavigationManager
@using TennisApp.Models
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer

<PageTitle>Create Match</PageTitle>

<h1>Create</h1>
<h4>Match</h4>
<hr />

@if (isLoading)
{
    <p>Loading...</p>
}
else if (matchCreated)
{
    <div class="alert alert-success">
        <p>Match created successfully!</p>
        <a href="/matches" class="btn btn-primary">Back to Matches</a>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <form @onsubmit="AddMatch">
                @if (validationErrors.Any())
                {
                    <div class="alert alert-danger">
                        <ul>
                            @foreach (var error in validationErrors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }

                <!-- Court Dropdown -->
                <div class="mb-3">
                    <label for="court" class="form-label">Court:</label>
                    <select id="court" @bind="Match.CourtId" class="form-control">
                        <option value="0">-- Select a Court --</option>
                        @foreach (var court in courts)
                        {
                            <option value="@court.Id">@court.Name</option>
                        }
                    </select>
                </div>

                <!-- Match Date and Time -->
                <div class="mb-3">
                    <label for="matchdate" class="form-label">Match Date:</label>
                    <input id="matchdate" type="date" class="form-control" value="@_dateString"
                        @onchange="@(e => _dateString = e.Value?.ToString() ?? _dateString)" />
                </div>

                <div class="mb-3">
                    <label for="matchtime" class="form-label">Match Time:</label>
                    <input id="matchtime" type="time" class="form-control" value="@_timeString"
                        @onchange="@(e => _timeString = e.Value?.ToString() ?? _timeString)" />
                </div>

                <!-- Player 1 Dropdown -->
                <div class="mb-3">
                    <label for="player1" class="form-label">Player 1:</label>
                    <select id="player1" @bind="Match.Player1Id" class="form-control">
                        <option value="0">-- Select Player 1 --</option>
                        @foreach (var player in players)
                        {
                            <option value="@player.Id">@player.Name</option>
                        }
                    </select>
                </div>

                <!-- Player 2 Dropdown -->
                <div class="mb-3">
                    <label for="player2" class="form-label">Player 2:</label>
                    <select id="player2" @bind="Match.Player2Id" class="form-control">
                        <option value="0">-- Select Player 2 --</option>
                        @foreach (var player in players)
                        {
                            <option value="@player.Id">@player.Name</option>
                        }
                    </select>
                </div>

                <!-- Scoreboard Dropdown -->
                <div class="mb-3">
                    <label for="scoreboard" class="form-label">Scoreboard:</label>
                    <select id="scoreboard" @bind="Match.ScoreboardId" class="form-control">
                        <option value="0">-- Select a Scoreboard --</option>
                        @foreach (var scoreboard in scoreboards)
                        {
                            <option value="@scoreboard.Id">@scoreboard.Id</option>
                        }
                    </select>
                </div>

                <button type="submit" class="btn btn-primary">Create</button>
                <a href="/matches" class="btn btn-secondary">Cancel</a>
            </form>
        </div>
    </div>
}

@code {
    // Initialize the Match property with default values
    private Match Match { get; set; } = new Match();

    private List<Court> courts = new();
    private List<Player> players = new();
    private List<Scoreboard> scoreboards = new();
    private bool isLoading = true;
    private bool matchCreated = false;
    private List<string> validationErrors = new();

    // Simple string properties for date and time
    private string _dateString = DateTime.Now.ToString("yyyy-MM-dd");
    private string _timeString = DateTime.Now.ToString("HH:mm");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load each set of data sequentially with separate contexts
            await LoadCourtsAsync();
            await LoadPlayersAsync();
            await LoadScoreboardsAsync();

            // Set a default court if available
            if (courts.Any())
            {
                Match.CourtId = courts.First().Id;
            }

            // Set default players if available
            if (players.Count >= 2)
            {
                Match.Player1Id = players[0].Id;
                Match.Player2Id = players[1].Id;
            }

            // Set a default scoreboard if available
            if (scoreboards.Any())
            {
                Match.ScoreboardId = scoreboards.First().Id;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            validationErrors.Add($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCourtsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        courts = await context.Court.ToListAsync();
    }

    private async Task LoadPlayersAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        players = await context.Player.ToListAsync();
    }

    private async Task LoadScoreboardsAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        scoreboards = await context.Scoreboard.ToListAsync();
    }

    private bool ValidateModel()
    {
        validationErrors.Clear();

        // Validate Court
        if (Match.CourtId <= 0 || !courts.Any(c => c.Id == Match.CourtId))
        {
            validationErrors.Add("Please select a valid court");
            return false;
        }

        // Validate Player1
        if (Match.Player1Id <= 0 || !players.Any(p => p.Id == Match.Player1Id))
        {
            validationErrors.Add("Please select a valid player for Player 1");
            return false;
        }

        // Validate Player2
        if (Match.Player2Id <= 0 || !players.Any(p => p.Id == Match.Player2Id))
        {
            validationErrors.Add("Please select a valid player for Player 2");
            return false;
        }

        // Validate Scoreboard
        if (Match.ScoreboardId <= 0 || !scoreboards.Any(s => s.Id == Match.ScoreboardId))
        {
            validationErrors.Add("Please select a valid scoreboard");
            return false;
        }

        // Validate date/time
        if (string.IsNullOrEmpty(_dateString) || string.IsNullOrEmpty(_timeString))
        {
            validationErrors.Add("Please enter both date and time");
            return false;
        }

        return true;
    }

    private async Task AddMatch()
    {
        if (!ValidateModel())
        {
            return;
        }

        try
        {
            // Create a DateTime directly from the string inputs
            string combinedDateTimeStr = $"{_dateString} {_timeString}";

            if (DateTime.TryParse(combinedDateTimeStr, out DateTime parsedDateTime))
            {
                // Simply mark the parsed DateTime as UTC without conversion
                // This preserves the exact hours and minutes entered by the user
                Match.MatchTime = DateTime.SpecifyKind(parsedDateTime, DateTimeKind.Utc);

                Console.WriteLine($"Input date/time: {combinedDateTimeStr}");
                Console.WriteLine($"Parsed as: {parsedDateTime}");
                Console.WriteLine($"Saved as UTC: {Match.MatchTime}");
            }
            else
            {
                validationErrors.Add($"Could not parse date and time: {combinedDateTimeStr}");
                return;
            }

            await using var context = await DbContextFactory.CreateDbContextAsync();
            context.Match.Add(Match);
            await context.SaveChangesAsync();

            matchCreated = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating match: {ex.Message}");
            validationErrors.Add($"Error saving match: {ex.Message}");
        }
    }
}