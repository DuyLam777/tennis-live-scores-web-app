@page "/tournaments"
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@using Microsoft.EntityFrameworkCore
@using TennisApp.Data
@using TennisApp.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@implements IDisposable
<PageTitle>Tournaments</PageTitle>

<h1>Tournaments</h1>

<p>
    <a href="/tournaments/create" class="btn btn-primary">Create New</a>
</p>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@tournamentsQuery" Class="table table-striped table-hover">
        <PropertyColumn Property="t => t.Name" Title="Name" Sortable="true" />
        <PropertyColumn Property="t => t.StartDate" Title="Start Date" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="t => t.EndDate" Title="End Date" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="t => t.Host != null ? t.Host.Name : string.Empty" Title="Host Club" Sortable="true" />
        <PropertyColumn Property="t => t.Status" Title="Status" Sortable="true" />
        <PropertyColumn Property="t => t.Type" Title="Type" Sortable="true" />
        <TemplateColumn Title="Actions">
            <a href="/tournaments/edit/@context.Id" class="btn btn-primary btn-sm">Edit</a>
            <a href="/tournaments/details/@context.Id" class="btn btn-info btn-sm">Details</a>
            <a href="/tournaments/delete/@context.Id" class="btn btn-danger btn-sm">Delete</a>
            <a href="/tournaments/@context.Id/matches" class="btn btn-success btn-sm">Matches</a>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private IQueryable<Tournament> tournamentsQuery = null!;
    private bool isLoading = true;
    private TennisAppContext dbContext = null!;

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();

        // Create the query - don't execute it yet
        tournamentsQuery = dbContext.Tournament
        .Include(t => t.Host)
        .AsQueryable();

        isLoading = false;
    }

    public void Dispose()
    {
        // Make sure to dispose the context when the component is disposed
        dbContext?.Dispose();
    }
}