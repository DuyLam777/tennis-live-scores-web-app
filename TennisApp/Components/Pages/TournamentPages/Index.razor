@page "/tournaments"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using TennisApp.Models
@using TennisApp.DTOs
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Tournaments</PageTitle>
<link rel="stylesheet" href="css/tournaments-page.css">

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="fw-bold bs-body-color">Tournaments</h1>
                <a href="/tournaments/create" class="btn btn-primary px-4">
                    Create New Tournament
                </a>
            </div>
            <p class="text-muted">Manage all tennis tournaments in one place</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col">
                <div class="card shadow-sm border-0 p-4">
                    <div class="d-flex justify-content-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-danger shadow-sm" role="alert">
                    <h4 class="alert-heading">Error Loading Data</h4>
                    <p class="mb-0">@errorMessage</p>
                    @if (!string.IsNullOrEmpty(rawJsonData))
                    {
                        <hr />
                        <h5>Raw Response Data (first 500 chars):</h5>
                        <pre
                            style="max-height: 200px; overflow: auto;">@(rawJsonData.Length > 500 ? rawJsonData.Substring(0, 500) + "..." : rawJsonData)</pre>
                    }
                </div>
                <button class="btn btn-primary" @onclick="LoadTournamentsAlternate">Try Alternative Loading Method</button>
            </div>
        </div>
    }
    else
    {
        <div class="tournament-grid">
            @foreach (var tournament in tournaments)
            {
                <div class="tournament-card @GetTournamentStatusClass(tournament)">
                    <div class="tournament-card-header">
                        <div class="tournament-dates">
                            @tournament.StartDate.ToString("MMM dd") - @tournament.EndDate.ToString("MMM dd, yyyy")
                        </div>
                        <div class="tournament-host">@tournament.HostName</div>
                    </div>
                    <div class="tournament-name">
                        <h3>@tournament.Name</h3>
                        <div class="tournament-type">@tournament.Type</div>
                    </div>
                    <div class="tournament-footer">
                        <div class="tournament-status">
                            <span class="status-badge @GetStatusBadgeClass(tournament)">
                                @tournament.Status
                            </span>
                        </div>
                        <div class="tournament-actions">
                            <a href="/tournaments/edit/@tournament.Id" class="action-button edit-btn">Edit</a>
                            <a href="/tournaments/details/@tournament.Id" class="action-button details-btn">Details</a>
                            <a href="/tournaments/@tournament.Id/matches" class="action-button matches-btn">Matches</a>
                            <a href="/tournaments/delete/@tournament.Id" class="action-button delete-btn">Delete</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (!tournaments.Any())
        {
            <div class="no-results">
                <p>No tournaments found.</p>
            </div>
        }
    }
</div>

@code {
    private List<TournamentDto> tournaments = new();
    private bool isLoading = true;
    private string? errorMessage;
    private string rawJsonData = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTournaments();
    }

    private async Task LoadTournaments()
    {
        isLoading = true;
        errorMessage = null;
        rawJsonData = string.Empty;

        try
        {
            // First attempt to get the raw response to examine what's being returned
            var response = await HttpClient.GetAsync("api/Tournament");
            rawJsonData = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Raw JSON response: {rawJsonData}");

            if (response.IsSuccessStatusCode)
            {
                // Define serialization options with enum converter
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new JsonStringEnumConverter() },
                    ReferenceHandler = ReferenceHandler.Preserve
                };

                // Try to deserialize using the options
                var result = JsonSerializer.Deserialize<List<TournamentDto>>(rawJsonData, options);

                if (result != null)
                {
                    tournaments = result;
                }
                else
                {
                    tournaments = new List<TournamentDto>();
                    errorMessage = "Deserialized result was null";
                }
            }
            else
            {
                errorMessage = $"API returned status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tournaments: {ex.Message}";
            Console.WriteLine($"Detailed error: {ex}");

            // Attempt to log to browser console as well
            await JSRuntime.InvokeVoidAsync("console.error", "Tournament loading error:", ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    // Alternative method that tries a different approach
    private async Task LoadTournamentsAlternate()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Direct API call
            var response = await HttpClient.GetAsync("api/Tournament");

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"API returned status code: {response.StatusCode}";
                rawJsonData = await response.Content.ReadAsStringAsync();
                return;
            }

            rawJsonData = await response.Content.ReadAsStringAsync();

            // Try to create tournaments manually
            var tempTournaments = new List<TournamentDto>();

            using (JsonDocument doc = JsonDocument.Parse(rawJsonData))
            {
                // Check if root is an array
                if (doc.RootElement.ValueKind == JsonValueKind.Array)
                {
                    foreach (JsonElement item in doc.RootElement.EnumerateArray())
                    {
                        try
                        {
                            var tournament = new TournamentDto
                            {
                                Id = item.GetProperty("id").GetInt32(),
                                Name = item.GetProperty("name").GetString() ?? string.Empty,
                                HostId = item.GetProperty("hostId").GetInt32(),
                                HostName = item.TryGetProperty("hostName", out var hostName) ? hostName.GetString() : null,
                                Description = item.TryGetProperty("description", out var desc) ? desc.GetString() : null
                            };

                            // Try to parse dates
                            if (item.TryGetProperty("startDate", out var startDate) && DateTime.TryParse(startDate.GetString(), out var
                            parsedStartDate))
                            {
                                tournament.StartDate = parsedStartDate;
                            }

                            if (item.TryGetProperty("endDate", out var endDate) && DateTime.TryParse(endDate.GetString(), out var parsedEndDate))
                            {
                                tournament.EndDate = parsedEndDate;
                            }

                            // Try to parse status - could be string or int
                            if (item.TryGetProperty("status", out var status))
                            {
                                if (status.ValueKind == JsonValueKind.String)
                                {
                                    if (Enum.TryParse<TournamentStatus>(status.GetString(), out var statusEnum))
                                    {
                                        tournament.Status = statusEnum;
                                    }
                                }
                                else if (status.ValueKind == JsonValueKind.Number)
                                {
                                    tournament.Status = (TournamentStatus)status.GetInt32();
                                }
                            }

                            // Try to parse type - could be string or int
                            if (item.TryGetProperty("type", out var type))
                            {
                                if (type.ValueKind == JsonValueKind.String)
                                {
                                    if (Enum.TryParse<TournamentType>(type.GetString(), out var typeEnum))
                                    {
                                        tournament.Type = typeEnum;
                                    }
                                }
                                else if (type.ValueKind == JsonValueKind.Number)
                                {
                                    tournament.Type = (TournamentType)type.GetInt32();
                                }
                            }

                            // Try to get max participants
                            if (item.TryGetProperty("maxParticipants", out var maxParticipants) &&
                            maxParticipants.ValueKind != JsonValueKind.Null)
                            {
                                tournament.MaxParticipants = maxParticipants.GetInt32();
                            }

                            tempTournaments.Add(tournament);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error parsing tournament item: {ex.Message}");
                        }
                    }

                    tournaments = tempTournaments;
                }
                else
                {
                    errorMessage = "API response is not a JSON array";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error in alternate loading method: {ex.Message}";
            Console.WriteLine($"Detailed error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetTournamentStatusClass(TournamentDto tournament)
    {
        return tournament.Status switch
        {
            TournamentStatus.Ongoing => "ongoing",
            TournamentStatus.Upcoming => "upcoming",
            TournamentStatus.Completed => "completed",
            TournamentStatus.Cancelled => "cancelled",
            _ => string.Empty
        };
    }

    private string GetStatusBadgeClass(TournamentDto tournament)
    {
        return tournament.Status switch
        {
            TournamentStatus.Ongoing => "status-live",
            TournamentStatus.Upcoming => "match-status",
            TournamentStatus.Completed => "completed-status",
            TournamentStatus.Cancelled => "status-cancelled",
            _ => string.Empty
        };
    }
}