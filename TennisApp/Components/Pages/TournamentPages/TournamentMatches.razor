@page "/tournaments/{TournamentId:int}/matches"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@using System.Net.Http.Json
@using TennisApp.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Tournament Matches</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else if (tournament == null)
    {
        <div class="alert alert-danger">Tournament not found.</div>
        <a href="/tournaments" class="btn btn-primary">Back to Tournaments</a>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Matches for @tournament.Name</h1>
            <div>
                <a href="/matches/create/@TournamentId" class="btn btn-success">
                    <i class="bi bi-plus"></i> Create New Match
                </a>
                <a href="/tournaments/details/@TournamentId" class="btn btn-outline-secondary">
                    Back to Tournament
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Tournament Matches</h5>
                    </div>
                    <div class="card-body">
                        @if (!tournamentMatches.Any())
                        {
                            <div class="alert alert-info">
                                No matches have been added to this tournament yet.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Court</th>
                                            <th>Player 1</th>
                                            <th>Player 2</th>
                                            <th>Date & Time</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var match in tournamentMatches)
                                        {
                                            <tr>
                                                <td>@(match.Court?.Name ?? "N/A")</td>
                                                <td>@(match.Player1?.Name ?? "N/A")</td>
                                                <td>@(match.Player2?.Name ?? "N/A")</td>
                                                <td>@match.MatchTime.ToLocalTime().ToString("g")</td>
                                                <td>
                                                    @{
                                                        var isCompleted = match.Sets.All(s => s.IsCompleted);
                                                        var isActive = match.Sets.Any(s => !s.IsCompleted);
                                                    }
                                                    @if (isCompleted)
                                                    {
                                                        <span class="badge bg-success">Completed</span>
                                                    }
                                                    else if (isActive)
                                                    {
                                                        <span class="badge bg-primary">In Progress</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Scheduled</span>
                                                    }
                                                </td>
                                                <td>
                                                    <a href="/matches/details/@match.Id" class="btn btn-sm btn-info">
                                                        Details
                                                    </a>
                                                    <button class="btn btn-sm btn-danger"
                                                        @onclick="() => RemoveMatchFromTournament(match.Id)">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (availableMatches.Any())
        {
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>Add Existing Match to Tournament</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Court</th>
                                            <th>Player 1</th>
                                            <th>Player 2</th>
                                            <th>Date & Time</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var match in availableMatches)
                                        {
                                            <tr>
                                                <td>@(match.Court?.Name ?? "N/A")</td>
                                                <td>@(match.Player1?.Name ?? "N/A")</td>
                                                <td>@(match.Player2?.Name ?? "N/A")</td>
                                                <td>@match.MatchTime.ToLocalTime().ToString("g")</td>
                                                <td>
                                                    <button class="btn btn-sm btn-success"
                                                        @onclick="() => AddMatchToTournament(match.Id)">
                                                        Add to Tournament
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int TournamentId { get; set; }

    private Tournament? tournament;
    private List<Match> tournamentMatches = new();
    private List<Match> availableMatches = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();

            // Load tournament with its matches
            tournament = await context.Tournament
            .Include(t => t.Matches)
            .ThenInclude(m => m.Player1)
            .Include(t => t.Matches)
            .ThenInclude(m => m.Player2)
            .Include(t => t.Matches)
            .ThenInclude(m => m.Court)
            .Include(t => t.Matches)
            .ThenInclude(m => m.Sets)
            .FirstOrDefaultAsync(t => t.Id == TournamentId);

            if (tournament != null)
            {
                tournamentMatches = tournament.Matches.ToList();

                // Get matches not associated with this tournament
                availableMatches = await context.Match
                .Where(m => m.TournamentId == null)
                .Include(m => m.Player1)
                .Include(m => m.Player2)
                .Include(m => m.Court)
                .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddMatchToTournament(int matchId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/Tournament/{TournamentId}/AddMatch?matchId={matchId}", null);

            if (response.IsSuccessStatusCode)
            {
                // Reload the data after successful addition
                await LoadData();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error adding match: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding match: {ex.Message}";
        }
    }

    private async Task RemoveMatchFromTournament(int matchId)
    {
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var match = await context.Match.FindAsync(matchId);

            if (match != null)
            {
                match.TournamentId = null;
                await context.SaveChangesAsync();

                // Reload the data after successful removal
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing match: {ex.Message}";
        }
    }
}