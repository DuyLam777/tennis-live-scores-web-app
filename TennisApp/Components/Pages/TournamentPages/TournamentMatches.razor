@page "/tournaments/{TournamentId:int}/matches"
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using TennisApp.Data
@using TennisApp.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@implements IDisposable

<PageTitle>Tournament Matches</PageTitle>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (tournament == null)
{
    <div class="alert alert-danger">Tournament not found.</div>
    <a href="/tournaments" class="btn btn-primary">Back to Tournaments</a>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Matches - @tournament.Name</h1>
        <div>
            <a href="/matches/create?tournamentId=@TournamentId" class="btn btn-primary">Add Match</a>
            <a href="/tournaments/details/@TournamentId" class="btn btn-outline-secondary ms-2">Back to Tournament</a>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5>Tournament Information</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Start Date:</dt>
                        <dd class="col-sm-8">@tournament.StartDate.ToShortDateString()</dd>

                        <dt class="col-sm-4">End Date:</dt>
                        <dd class="col-sm-8">@tournament.EndDate.ToShortDateString()</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Status:</dt>
                        <dd class="col-sm-8">
                            <span class="badge @GetStatusBadgeClass(tournament.Status)">
                                @tournament.Status
                            </span>
                        </dd>

                        <dt class="col-sm-4">Type:</dt>
                        <dd class="col-sm-8">@tournament.Type</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    @if (!matchesQuery.Any())
    {
        <div class="alert alert-info">
            No matches have been added to this tournament yet. Click "Add Match" to schedule a match.
        </div>
    }
    else
    {
        <QuickGrid Items="@matchesQuery" Class="table table-striped table-hover">
            <PropertyColumn Property="m => m.Id" Title="ID" Sortable="true" />
            <PropertyColumn Property="m => m.Court != null ? m.Court.Name : string.Empty" Title="Court" Sortable="true" />
            <PropertyColumn Property="m => m.MatchTime" Title="Match Time" Format="yyyy-MM-dd HH:mm" Sortable="true" />
            <PropertyColumn Property="m => m.Player1 != null ? m.Player1.Name : string.Empty" Title="Player 1"
                Sortable="true" />
            <PropertyColumn Property="m => m.Player2 != null ? m.Player2.Name : string.Empty" Title="Player 2"
                Sortable="true" />
            <PropertyColumn Property="m => m.ScoreboardId" Title="Scoreboard ID" Sortable="true" />
            <TemplateColumn Title="Actions">
                <a href="/matches/edit/@context.Id" class="btn btn-primary btn-sm">Edit</a>
                <a href="/matches/details/@context.Id" class="btn btn-info btn-sm">Details</a>
                <a href="/matches/delete/@context.Id" class="btn btn-danger btn-sm">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    }
}

@code {
    [Parameter]
    public int TournamentId { get; set; }

    private Tournament? tournament;
    private IQueryable<Match> matchesQuery = null!;
    private bool isLoading = true;
    private TennisAppContext dbContext = null!;

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();

        await LoadTournament();

        // Create the query - don't execute it yet
        matchesQuery = dbContext.Match
        .Where(m => m.TournamentId == TournamentId)
        .Include(m => m.Court)
        .Include(m => m.Player1)
        .Include(m => m.Player2)
        .AsQueryable();

        isLoading = false;
    }

    private async Task LoadTournament()
    {
        tournament = await dbContext.Tournament
        .FirstOrDefaultAsync(t => t.Id == TournamentId);
    }

    private string GetStatusBadgeClass(TournamentStatus status)
    {
        return status switch
        {
            TournamentStatus.Upcoming => "bg-info",
            TournamentStatus.Ongoing => "bg-primary",
            TournamentStatus.Completed => "bg-success",
            TournamentStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    public void Dispose()
    {
        // Make sure to dispose the context when the component is disposed
        dbContext?.Dispose();
    }
}