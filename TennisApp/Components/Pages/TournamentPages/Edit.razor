@page "/tournaments/edit/{Id:int}"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using TennisApp.Models
@using TennisApp.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Edit Tournament</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (tournament == null)
{
    <div class="alert alert-danger">Tournament not found.</div>
    <a href="/tournaments" class="btn btn-primary">Back to Tournaments</a>
}
else
{
    <h1>Edit Tournament</h1>

    <div class="row">
        <div class="col-md-8">
            <EditForm Model="@tournament" OnValidSubmit="HandleValidSubmit" FormName="tournamentEditForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Tournament Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" @bind-Value="tournament.Name" class="form-control" />
                            <ValidationMessage For="@(() => tournament.Name)" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="startDate" class="form-label">Start Date</label>
                                <InputDate id="startDate" @bind-Value="tournament.StartDate" class="form-control" />
                                <ValidationMessage For="@(() => tournament.StartDate)" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="endDate" class="form-label">End Date</label>
                                <InputDate id="endDate" @bind-Value="tournament.EndDate" class="form-control" />
                                <ValidationMessage For="@(() => tournament.EndDate)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="hostId" class="form-label">Host Club</label>
                            <InputSelect id="hostId" @bind-Value="tournament.HostId" class="form-select">
                                <option value="">-- Select a Host Club --</option>
                                @foreach (var club in clubs)
                                {
                                    <option value="@club.Id">@club.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => tournament.HostId)" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" @bind-Value="tournament.Description" class="form-control"
                                rows="3" />
                            <ValidationMessage For="@(() => tournament.Description)" />
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Tournament Settings</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="status" class="form-label">Status</label>
                                <InputSelect id="status" @bind-Value="tournament.Status" class="form-select">
                                    @foreach (var status in Enum.GetValues<TournamentStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => tournament.Status)" />
                            </div>

                            <div class="col-md-4 mb-3">
                                <label for="type" class="form-label">Tournament Type</label>
                                <InputSelect id="type" @bind-Value="tournament.Type" class="form-select">
                                    @foreach (var type in Enum.GetValues<TournamentType>())
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => tournament.Type)" />
                            </div>

                            <div class="col-md-4 mb-3">
                                <label for="maxParticipants" class="form-label">Max Participants</label>
                                <InputNumber id="maxParticipants" @bind-Value="tournament.MaxParticipants"
                                    class="form-control" />
                                <ValidationMessage For="@(() => tournament.MaxParticipants)" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group mt-4 d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a href="/tournaments" class="btn btn-outline-secondary">Cancel</a>
                </div>
            </EditForm>
        </div>

        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Tournament Status</h5>
                </div>
                <div class="card-body">
                    <p>This tournament has:</p>
                    <ul>
                        <li><strong>@(matchCount)</strong> scheduled matches</li>
                        <li><strong>@registeredCount</strong> registered participants</li>
                    </ul>

                    @if (tournament.MaxParticipants.HasValue && registeredCount > tournament.MaxParticipants.Value)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> The number of participants exceeds the maximum limit.
                        </div>
                    }

                    @if (tournament.EndDate < DateTime.Today && tournament.Status != TournamentStatus.Completed &&
                                    tournament.Status != TournamentStatus.Cancelled)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> This tournament's end date has passed. Consider updating the
                            status to Completed.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateTournamentDto? tournament;
    private List<ClubDto> clubs = new();
    private bool isLoading = true;
    private string? errorMessage;
    private int matchCount = 0;
    private int registeredCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // Load tournament data
        await LoadTournament();

        // Load clubs for dropdown
        await LoadClubs();
    }

    private async Task LoadClubs()
    {
        try
        {
            // Define JSON options
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                ReferenceHandler = ReferenceHandler.Preserve
            };

            // Get clubs from API
            var response = await HttpClient.GetAsync("api/Club");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var clubsResponse = JsonSerializer.Deserialize<List<ClubDto>>(content, options);

                if (clubsResponse != null)
                {
                    clubs = clubsResponse;
                }
            }
            else
            {
                errorMessage = $"Error loading clubs: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading clubs: {ex.Message}";
            Console.WriteLine($"Club loading error: {ex}");
        }
    }

    private async Task LoadTournament()
    {
        isLoading = true;

        try
        {
            // Define JSON options with enum converter
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() },
                ReferenceHandler = ReferenceHandler.Preserve
            };

            // Get tournament from API as TournamentDetailDto first to get all details
            var tournamentDetail = await HttpClient.GetFromJsonAsync<TournamentDetailDto>($"api/Tournament/{Id}", options);

            if (tournamentDetail == null)
            {
                errorMessage = "Tournament not found";
                return;
            }

            // Create the UpdateTournamentDto from the detail data
            tournament = new UpdateTournamentDto
            {
                Id = tournamentDetail.Id,
                Name = tournamentDetail.Name,
                StartDate = tournamentDetail.StartDate,
                EndDate = tournamentDetail.EndDate,
                HostId = tournamentDetail.HostId,
                Description = tournamentDetail.Description,
                Status = tournamentDetail.Status,
                Type = tournamentDetail.Type,
                MaxParticipants = tournamentDetail.MaxParticipants
            };

            // Store match count and registered count for display
            matchCount = tournamentDetail.Matches?.Count ?? 0;

            // Calculate registered participants
            if (tournamentDetail.Matches != null && tournamentDetail.Matches.Any())
            {
                HashSet<int> playerIds = new HashSet<int>();
                foreach (var match in tournamentDetail.Matches)
                {
                    playerIds.Add(match.Player1Id);
                    playerIds.Add(match.Player2Id);
                }
                registeredCount = playerIds.Count;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tournament: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (tournament == null)
            {
                errorMessage = "Tournament not found";
                return;
            }

            // Validate dates
            if (tournament.EndDate < tournament.StartDate)
            {
                errorMessage = "End date must be after or equal to start date";
                return;
            }

            // Convert date times to UTC for PostgreSQL compatibility
            tournament.StartDate = DateTime.SpecifyKind(tournament.StartDate, DateTimeKind.Utc);
            tournament.EndDate = DateTime.SpecifyKind(tournament.EndDate, DateTimeKind.Utc);

            // Use API to update tournament
            var response = await HttpClient.PutAsJsonAsync($"api/Tournament/{Id}", tournament);

            if (response.IsSuccessStatusCode)
            {
                // Redirect back to the tournaments list
                NavigationManager.NavigateTo("/tournaments");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error updating tournament: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating tournament: {ex.Message}";
        }
    }
}