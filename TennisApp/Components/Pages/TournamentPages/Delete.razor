@page "/tournaments/delete/{Id:int}"
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using TennisApp.Data
@using TennisApp.Models
@implements IDisposable

<PageTitle>Delete Tournament</PageTitle>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (tournament == null)
{
    <div class="alert alert-danger">Tournament not found.</div>
    <a href="/tournaments" class="btn btn-primary">Back to Tournaments</a>
}
else
{
    <h1>Delete Tournament</h1>

    <div class="alert alert-danger mb-4">
        <h4 class="alert-heading">Warning!</h4>
        <p>Are you sure you want to delete this tournament? This action cannot be undone.</p>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5>Tournament Details</h5>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@tournament.Name</dd>

                <dt class="col-sm-3">Date Range</dt>
                <dd class="col-sm-9">@tournament.StartDate.ToShortDateString() to @tournament.EndDate.ToShortDateString()
                </dd>

                <dt class="col-sm-3">Host Club</dt>
                <dd class="col-sm-9">@(tournament.Host?.Name ?? "N/A")</dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">@tournament.Status</dd>

                <dt class="col-sm-3">Type</dt>
                <dd class="col-sm-9">@tournament.Type</dd>
            </dl>
        </div>
    </div>

    @if (tournament.Matches.Count > 0)
    {
        <div class="card mb-4">
            <div class="card-header text-white bg-warning">
                <h5 class="mb-0">Associated Data Will Be Deleted</h5>
            </div>
            <div class="card-body">
                <p>This tournament has <strong>@tournament.Matches.Count</strong> associated matches that will also be deleted.
                </p>

                <div class="table-responsive">
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>Date & Time</th>
                                <th>Court</th>
                                <th>Player 1</th>
                                <th>Player 2</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var match in tournament.Matches)
                            {
                                <tr>
                                    <td>@match.MatchTime.ToString("g")</td>
                                    <td>@(match.Court?.Name ?? "N/A")</td>
                                    <td>@(match.Player1?.Name ?? "N/A")</td>
                                    <td>@(match.Player2?.Name ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <div class="form-group mt-4 d-flex gap-2">
        <button type="button" class="btn btn-danger" @onclick="DeleteTournament">Delete Tournament</button>
        <a href="/tournaments" class="btn btn-outline-secondary">Cancel</a>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Tournament? tournament;
    private bool isLoading = true;
    private TennisAppContext dbContext = null!;

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();
        await LoadTournament();
    }

    private async Task LoadTournament()
    {
        isLoading = true;
        tournament = await dbContext.Tournament
        .Include(t => t.Host)
        .Include(t => t.Matches)
        .ThenInclude(m => m.Court)
        .Include(t => t.Matches)
        .ThenInclude(m => m.Player1)
        .Include(t => t.Matches)
        .ThenInclude(m => m.Player2)
        .FirstOrDefaultAsync(t => t.Id == Id);

        isLoading = false;
    }

    private async Task DeleteTournament()
    {
        if (tournament != null)
        {
            dbContext.Tournament.Remove(tournament);
            await dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/tournaments");
        }
    }

    public void Dispose()
    {
        // Make sure to dispose the context when the component is disposed
        dbContext?.Dispose();
    }
}