@page "/Sets/edit"
@inject TennisApp.Data.TennisAppContext DB
@using TennisApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Set</h4>
<hr />
@if (Set is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Set" OnValidSubmit="UpdateSet" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Set.Id" value="@Set.Id" />
                <div class="mb-3">
                    <label for="setnumber" class="form-label">SetNumber:</label>
                    <InputNumber id="setnumber" @bind-Value="Set.SetNumber" class="form-control" />
                    <ValidationMessage For="() => Set.SetNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="player1games" class="form-label">Player1Games:</label>
                    <InputNumber id="player1games" @bind-Value="Set.Player1Games" class="form-control" />
                    <ValidationMessage For="() => Set.Player1Games" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="player2games" class="form-label">Player2Games:</label>
                    <InputNumber id="player2games" @bind-Value="Set.Player2Games" class="form-control" />
                    <ValidationMessage For="() => Set.Player2Games" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="iscompleted" class="form-label">IsCompleted:</label>
                    <InputCheckbox id="iscompleted" @bind-Value="Set.IsCompleted" class="form-check-input" />
                    <ValidationMessage For="() => Set.IsCompleted" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="winnerid" class="form-label">WinnerId:</label>
                    <InputNumber id="winnerid" @bind-Value="Set.WinnerId" class="form-control" />
                    <ValidationMessage For="() => Set.WinnerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="starttime" class="form-label">StartTime:</label>
                    <InputDate id="starttime" @bind-Value="Set.StartTime" class="form-control" />
                    <ValidationMessage For="() => Set.StartTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="endtime" class="form-label">EndTime:</label>
                    <InputDate id="endtime" @bind-Value="Set.EndTime" class="form-control" />
                    <ValidationMessage For="() => Set.EndTime" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/sets">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Set? Set { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Set ??= await DB.Set.FirstOrDefaultAsync(m => m.Id == Id);

        if (Set is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSet()
    {
        DB.Attach(Set!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SetExists(Set!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/sets");
    }

    bool SetExists(int id)
    {
        return DB.Set.Any(e => e.Id == id);
    }
}
