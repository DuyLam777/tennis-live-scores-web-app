@page "/"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Mvc.RazorPages
@using TennisApp.Models
@using TennisApp.Data
@using Microsoft.EntityFrameworkCore
@using TennisApp.WebSockets
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject WebSocketHandler WebSocketHandler
@implements IDisposable

<div class="page-container">
    <div class="header">
        <h1>Tennis Matches Dashboard</h1>
    </div>

    <div class="dashboard-controls">
        <div class="search-container">
            <input type="text" placeholder="Search by player name..." @bind-value="searchTerm"
                @oninput="OnSearchInput" />
            <button class="clear-search" @onclick="ClearSearch">Ã—</button>
        </div>
    </div>

    <div class="dashboard-section">
        <h2>All matches @(filteredMatches.Count != allMatches.Count ? $"({filteredMatches.Count} of {allMatches.Count})"
                        : "")</h2>
            @if (allMatches == null || !allMatches.Any())
            {
                <div class="loading-spinner-container">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading ongoing matches...</div>
                </div>
            }
            else if (filteredMatches.Count == 0)
            {
                <div class="no-results">
                    <p>No matches found for "@searchTerm"</p>
                    <button @onclick="ClearSearch">Clear search</button>
                </div>
            }
            else
            {
                <div class="match-list-wrapper" @ref="matchListContainer">
                    <div class="match-list">
                        @foreach (var match in filteredMatches)
                        {
                            string matchStatus = GetMatchStatus(match);
                            
                            <div class="match-card @matchStatus @(isLiveMatchRef(match) ? "current-focus" : "")">
                                <div class="match-card-header">
                                    <div class="match-time">@match.MatchTime.ToString("MMM dd, HH:mm")</div>
                                    <div class="match-location">@(match.Court?.Name ?? "Court TBD")</div>
                                    <div class="match-status @(matchStatus == "upcoming" ? "" :
                                        matchStatus == "completed" ? "completed-status" : "status-live")">
                                        @(matchStatus == "upcoming" ? GetCountdownText(match.MatchTime) :
                                        matchStatus == "completed" ? "Finished" : IsMatchLive(match) ? "Live" : "Starting soon")
                                    </div>
                                    <div class="match-sets">
                                        Set @(match.Sets?.Count ?? 0) of @GetMaxSets(match)
                                    </div>
                                </div>

                                <div class="match-players">
                                    <!-- Left player with name on left, score on right -->
                                    <div class="player player-left">
                                        <div class="player-info">
                                            <div class="player-name">@(match.Player1?.Name ?? "Player 1")</div>
                                            @if (!string.IsNullOrEmpty(match.Player1?.Country))
                                            {
                                                <div class="player-country">@match.Player1.Country</div>
                                            }
                                        </div>
                                        <div class="player-score player-score-left">
                                            @if (match.Sets == null || !match.Sets.Any())
                                            {
                                                <span class="set-score">0</span>
                                            }
                                            else
                                            {
                                                @foreach (var set in match.Sets.OrderBy(s => s.SetNumber))
                                                {
                                                    <span class="set-score">@set.Player1Games</span>
                                                }
                                            }
                                        </div>
                                    </div>

                                    <!-- VS in middle, absolutely positioned to ensure perfect center alignment -->
                                    <div class="match-vs">VS</div>

                                    <!-- Right player with score on left, name on right -->
                                    <div class="player player-right">
                                        <div class="player-score player-score-right">
                                            @if (match.Sets == null || !match.Sets.Any())
                                            {
                                                <span class="set-score">0</span>
                                            }
                                            else
                                            {
                                                @foreach (var set in match.Sets.OrderBy(s => s.SetNumber))
                                                {
                                                    <span class="set-score">@set.Player2Games</span>
                                                }
                                            }
                                        </div>
                                        <div class="player-info">
                                            <div class="player-name">@(match.Player2?.Name ?? "Player 2")</div>
                                            @if (!string.IsNullOrEmpty(match.Player2?.Country))
                                            {
                                                <div class="player-country">@match.Player2.Country</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
    </div>
</div>

@code {
    private TennisAppContext dbContext = null!;
    private List<Match> allMatches = new List<Match>();
    private List<Match> filteredMatches = new List<Match>();
    private string searchTerm = "";
    private string sortOption = "timeAsc";
    
    // References for scrolling functionality
    private ElementReference matchListContainer;
    private double lastScrollPosition = 0;
    private Match? liveMatchRef;
    
    // For WebSocket connectivity
    private bool isRegisteredForWebSocketUpdates = false;
    private DotNetObjectReference<Dashboard>? objRef;
    private string? clientSocketId;
    
    // Check if a match is the one we want to highlight
    private bool isLiveMatchRef(Match match)
    {
        return match == liveMatchRef;
    }

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();
        
        await LoadMatches();
        
        // Register for WebSocket updates
        WebSocketHandler.RegisterForWebSocketUpdates(this);
        isRegisteredForWebSocketUpdates = true;
        
        // Set up the .NET object reference for JavaScript interop
        objRef = DotNetObjectReference.Create(this);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // First render completed, now wait for matches to load
            await InvokeAsync(StateHasChanged);
            
            // Initialize the WebSocket connection via JavaScript
            await InitializeWebSocketConnection();
        }
        else if (filteredMatches.Count > 0 && liveMatchRef == null)
        {
            // Find the first live match
            var firstLiveMatch = filteredMatches.FirstOrDefault(m => GetMatchStatus(m) == "ongoing");
            if (firstLiveMatch != null)
            {
                // Set the reference match to trigger highlighting in the UI
                liveMatchRef = firstLiveMatch;
                
                // Request a UI update to apply the current-focus class
                await InvokeAsync(StateHasChanged);
                
                // Use the browser's native scrollIntoView API
                try
                {
                    // Find the current-focus element and scroll to it
                    await JSRuntime.InvokeVoidAsync("eval", 
                        "setTimeout(() => { " +
                        "  const element = document.querySelector('.current-focus'); " +
                        "  if (element) { " +
                        "    element.scrollIntoView({ behavior: 'smooth', block: 'center' }); " +
                        "  }" +
                        "}, 100);");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error scrolling to match: {ex.Message}");
                }
            }
        }
    }
    
    private async Task InitializeWebSocketConnection()
    {
        try
        {
            // Create scroll position management functions
            string scrollScript = @"
                // Function to save scroll position
                window.saveScrollPosition = (container) => {
                    if (container) {
                        return container.scrollTop;
                    }
                    return 0;
                };
                
                // Function to restore scroll position
                window.restoreScrollPosition = (container, position) => {
                    if (container) {
                        container.scrollTop = position;
                    }
                };
            ";
            
            // Create a WebSocket connection script
            string wsScript = @"
                window.connectWebSocket = (dotNetObj) => {
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${wsProtocol}//${window.location.host}/ws`;
                    
                    console.log('Connecting to WebSocket at:', wsUrl);
                    
                    const socket = new WebSocket(wsUrl);
                    
                    socket.onopen = () => {
                        console.log('WebSocket connection established');
                        
                        // Subscribe to live_score topic
                        const subscribeMsg = JSON.stringify({
                            action: 'subscribe',
                            topic: 'live_score'
                        });
                        socket.send(subscribeMsg);
                        console.log('Subscribed to live_score topic');
                        
                        // Request initial data
                        const getDataMsg = JSON.stringify({
                            action: 'get',
                            topic: 'live_score'
                        });
                        socket.send(getDataMsg);
                        console.log('Requested initial live_score data');
                    };
                    
                    socket.onmessage = (event) => {
                        console.log('WebSocket message received:', event.data);
                        dotNetObj.invokeMethodAsync('HandleWebSocketMessage', event.data);
                    };
                    
                    socket.onclose = (event) => {
                        console.log('WebSocket connection closed:', event.code, event.reason);
                        // Try to reconnect after a delay
                        setTimeout(() => window.connectWebSocket(dotNetObj), 5000);
                    };
                    
                    socket.onerror = (error) => {
                        console.error('WebSocket error:', error);
                    };
                    
                    // Store the socket in a global variable so we can access it later
                    window.tennisAppWebSocket = socket;
                    
                    return true;
                };
            ";
            
            // Combine and inject both scripts
            await JSRuntime.InvokeVoidAsync("eval", scrollScript + wsScript);
            
            // Connect to the WebSocket
            bool connected = await JSRuntime.InvokeAsync<bool>("connectWebSocket", objRef);
            Console.WriteLine($"WebSocket connection initialized: {connected}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing WebSocket connection: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public async Task HandleWebSocketMessage(string messageJson)
    {
        try
        {
            // Save scroll position before updating
            lastScrollPosition = await JSRuntime.InvokeAsync<double>("saveScrollPosition", 
                matchListContainer);
                
            Console.WriteLine($"Received WebSocket message: {messageJson}");
            
            // If it's a live_score update, refresh our match data
            if (messageJson.Contains("\"Type\":\"live_score\"") || messageJson.Contains("\"type\":\"live_score\""))
            {
                Console.WriteLine("Live score update detected, refreshing data...");
                
                // Make sure we're using a fresh DbContext
                dbContext.Dispose();
                dbContext = await DbContextFactory.CreateDbContextAsync();
                
                // Force database to clear its cache
                dbContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
                
                // Reload the matches but keep the current live match reference
                bool hasLiveMatch = liveMatchRef != null;
                await LoadMatches(keepLiveMatchRef: hasLiveMatch);
                
                Console.WriteLine("Refreshed matches after live_score update");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling WebSocket message: {ex.Message}");
        }
    }
    
    // Blazor method that WebSocketHandler will call when there's an update
    public async Task RefreshFromWebSocketEvent()
    {
        try
        {
            // Save scroll position before updating
            lastScrollPosition = await JSRuntime.InvokeAsync<double>("saveScrollPosition", 
                matchListContainer);
                
            // Keep live match reference when refreshing
            bool hasLiveMatch = liveMatchRef != null;
            await LoadMatches(keepLiveMatchRef: hasLiveMatch);
            
            await InvokeAsync(StateHasChanged);
            
            // Restore scroll position after update
            await JSRuntime.InvokeVoidAsync("restoreScrollPosition", 
                matchListContainer, lastScrollPosition);
                
            Console.WriteLine("Refreshed matches from WebSocketHandler notification");
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing from WebSocket event: {ex.Message}");
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterMatches();
    }

    private void FilterMatches(bool keepLiveMatchRef = false)
    {
        // Store current liveMatchRef if we need to keep it
        Match? currentLiveMatch = keepLiveMatchRef ? liveMatchRef : null;
        int? currentLiveMatchId = currentLiveMatch?.Id;
        
        // Apply search filter
        var filtered = allMatches;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            string term = searchTerm.Trim().ToLower();
            filtered = filtered.Where(m =>
            (m.Player1?.Name?.ToLower()?.Contains(term) ?? false) ||
            (m.Player2?.Name?.ToLower()?.Contains(term) ?? false)
            ).ToList();
        }

        // Apply sorting
        switch (sortOption)
        {
            case "timeDesc":
                filtered = filtered.OrderByDescending(m => m.MatchTime).ToList();
                break;
            case "timeAsc":
            default:
                filtered = filtered.OrderBy(m => m.MatchTime).ToList();
                break;
        }

        filteredMatches = filtered;
        
        // Conditionally restore liveMatchRef
        if (keepLiveMatchRef && currentLiveMatchId != null)
        {
            // Find the match in the new filtered list that matches the ID
            liveMatchRef = filteredMatches.FirstOrDefault(m => m.Id == currentLiveMatchId);
        }
        else
        {
            liveMatchRef = null;
        }
    }

    private void ClearSearch()
    {
        searchTerm = "";
        FilterMatches();
    }

    private async Task LoadMatches(bool keepLiveMatchRef = false)
    {
        try
        {
            // Create a new DbContext to ensure we're getting fresh data
            using var freshContext = await DbContextFactory.CreateDbContextAsync();
            
            // Query the database with explicit loading of all related entities
            allMatches = await freshContext.Match
                .AsNoTracking() // Use AsNoTracking for better performance in read-only scenarios
                .Include(m => m.Court)
                .Include(m => m.Player1)
                .Include(m => m.Player2)
                .Include(m => m.Sets)
                    .ThenInclude(s => s.Games) // Make sure we load the games within sets
                .ToListAsync();

            Console.WriteLine($"Successfully loaded {allMatches.Count} matches from database with {allMatches.Sum(m => m.Sets?.Count ?? 0)} sets and {allMatches.Sum(m => m.Sets?.Sum(s => s.Games?.Count ?? 0) ?? 0)} games");

            // Initialize filtered matches
            FilterMatches(keepLiveMatchRef);
            
            // Force refresh UI
            await InvokeAsync(StateHasChanged);
            
            // Restore scroll position after UI update
            await JSRuntime.InvokeVoidAsync("restoreScrollPosition", 
                matchListContainer, lastScrollPosition);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while loading matches from database: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            allMatches = new List<Match>();
            filteredMatches = new List<Match>();
        }
    }

    private string GetMatchStatus(Match m)
    {
        var currentTime = DateTime.Now;
        if ((m.Sets == null || !m.Sets.Any()) && m.MatchTime > currentTime.AddMinutes(10))
        {
            return "upcoming";
        }
        else if ((m.Sets != null && m.Sets.Any() && !IsMatchCompleted(m)) ||
        ((m.Sets == null || !m.Sets.Any()) &&
        m.MatchTime <= currentTime.AddMinutes(10)))
        {
            return "ongoing";
        }
        else if (IsMatchCompleted(m))
        {
            return "completed";
        }
        else
        {
            return "unknown";
        }
    }

    private bool IsMatchCompleted(Match match)
    {
        // Updated match completion logic:
        // 1. All sets must be completed
        // 2. At least 2 sets must have the same winnerId

        if (match.Sets == null || !match.Sets.Any())
            return false;

        // Check if all sets are completed first
        if (match.Sets.Any(s => !s.IsCompleted))
            return false;

        // Count wins for each player
        int? player1Id = match.Player1?.Id;
        int? player2Id = match.Player2?.Id;

        int player1Wins = match.Sets.Count(s => s.WinnerId == player1Id);
        int player2Wins = match.Sets.Count(s => s.WinnerId == player2Id);

        // Match is completed if either player has at least 2 set wins
        return player1Wins >= 2 || player2Wins >= 2;
    }

    private bool IsPlayerWinner(Match match, int? playerId)
    {
        if (match.Sets == null || !match.Sets.Any() || playerId == null)
            return false;

        int playerSets = match.Sets.Count(s => s.IsCompleted && s.WinnerId == playerId);
        int opponentSets = match.Sets.Count(s => s.IsCompleted && s.WinnerId != null && s.WinnerId != playerId);

        return playerSets > opponentSets;
    }

    private bool IsMatchLive(Match match)
{
    // Case 1: If there are no sets, it's not live
    if (match.Sets == null || !match.Sets.Any())
        return false;
        
    // Case 2: If all sets are completed and at least 2 sets have the same winner, it's not live
    if (match.Sets.All(s => s.IsCompleted))
    {
        // Count wins for each player
        int? player1Id = match.Player1?.Id;
        int? player2Id = match.Player2?.Id;
        
        int player1Wins = match.Sets.Count(s => s.WinnerId == player1Id);
        int player2Wins = match.Sets.Count(s => s.WinnerId == player2Id);
        
        // If either player has won at least 2 sets, the match is completed (not live)
        if (player1Wins >= 2 || player2Wins >= 2)
            return false;
    }
    
    // Otherwise, check if there's at least one incomplete set
    return match.Sets.Any(s => !s.IsCompleted);
}

    private int GetMaxSets(Match match)
    {
        return 3;
    }

    private string GetCountdownText(DateTime matchTime)
    {
        var timeUntilMatch = matchTime - DateTime.Now;

        if (timeUntilMatch.TotalDays >= 1)
        {
            return $"In {(int)timeUntilMatch.TotalDays} day{(timeUntilMatch.TotalDays >= 2 ? "s" : "")}";
        }
        else if (timeUntilMatch.TotalHours >= 1)
        {
            return $"In {(int)timeUntilMatch.TotalHours} hour{(timeUntilMatch.TotalHours >= 2 ? "s" : "")}";
        }
        else
        {
            return $"In {(int)timeUntilMatch.TotalMinutes} minute{(timeUntilMatch.TotalMinutes >= 2 ? "s" : "")}";
        }
    }

    private string GetMatchResult(Match match)
    {
        if (match.Sets == null || !match.Sets.Any())
            return "No result";

        int player1Sets = match.Sets.Count(s => s.IsCompleted && s.WinnerId == match.Player1?.Id);
        int player2Sets = match.Sets.Count(s => s.IsCompleted && s.WinnerId == match.Player2?.Id);

        return $"{player1Sets}-{player2Sets}";
    }
    
    public void Dispose()
    {
        try
        {
            // Unregister from WebSocket updates
            if (isRegisteredForWebSocketUpdates)
            {
                WebSocketHandler.UnregisterFromWebSocketUpdates(this);
            }
            
            // Clean up JavaScript interop
            objRef?.Dispose();
            
            // Close WebSocket if open
            JSRuntime.InvokeVoidAsync("eval", @"
                if (window.tennisAppWebSocket && window.tennisAppWebSocket.readyState === WebSocket.OPEN) {
                    window.tennisAppWebSocket.close();
                    console.log('WebSocket connection closed from component disposal');
                }
            ");
            
            // Properly dispose the DbContext when the component is disposed
            dbContext?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during component disposal: {ex.Message}");
        }
    }
}