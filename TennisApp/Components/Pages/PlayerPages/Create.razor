@page "/players/create"
@inject TennisApp.Data.TennisAppContext DB
@using TennisApp.Models
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>
<h1>Create</h1>
<h4>Player</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Player" OnValidSubmit="AddPlayer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <!-- Name -->
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Player.Name" class="form-control" />
                <ValidationMessage For="() => Player.Name" class="text-danger" />
            </div>

            <!-- Country -->
            <div class="mb-3">
                <label for="country" class="form-label">Country:</label>
                <InputText id="country" @bind-Value="Player.Country" class="form-control" />
                <ValidationMessage For="() => Player.Country" class="text-danger" />
            </div>

            <!-- DateOfBirth -->
            <div class="mb-3">
                <label for="dateofbirth" class="form-label">DateOfBirth:</label>
                <InputDate id="dateofbirth" @bind-Value="Player.DateOfBirth" class="form-control" />
                <ValidationMessage For="() => Player.DateOfBirth" class="text-danger" />
            </div>

            <!-- Gender -->
            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label>
                <InputSelect id="gender" @bind-Value="genderString" class="form-control">
                    @foreach (var gender in Enum.GetValues<Gender>())
                    {
                        <option value="@gender">@gender</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Player.gender" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>
<div>
    <a href="/players">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    public Player Player { get; set; } = new();

    // Helper variables for binding non-string properties
    private string? dateOfBirthString;
    private string? genderString;

    protected override void OnInitialized()
    {
        // Initialize helper variables with default values
        dateOfBirthString = DateTime.Now.ToString("yyyy-MM-dd");
        genderString = Gender.Male.ToString();
    }

    public async Task AddPlayer()
    {
        // Parse helper variables into their respective types
        if (DateOnly.TryParse(dateOfBirthString, out var parsedDateOfBirth))
        {
            Player.DateOfBirth = parsedDateOfBirth;
        }
        else
        {
            // Handle invalid date input (e.g., show an error message)
            return;
        }

        if (Enum.TryParse<Gender>(genderString, out var parsedGender))
        {
            Player.gender = parsedGender;
        }
        else
        {
            // Handle invalid gender input (e.g., show an error message)
            return;
        }

        DB.Player.Add(Player);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/players");
    }
}