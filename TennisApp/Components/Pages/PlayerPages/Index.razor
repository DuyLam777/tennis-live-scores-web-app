@page "/players"
@using TennisApp.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<TennisApp.Data.TennisAppContext> DbContextFactory
@implements IDisposable
@rendermode InteractiveServer
<PageTitle>Players</PageTitle>

<link rel="stylesheet" href="css/players-page.css">

<div class="page-container">
    <div class="players-header">
        <h1>Players</h1>
        <a href="players/create" class="btn btn-primary">Add New Player</a>
    </div>

    <div class="actions-container">
        <div class="search-bar">
            <input type="text" @bind="searchQuery" @bind:event="oninput" @onkeyup="HandleSearch"
                placeholder="Search by player name..." />
            <div class="filter-controls">
                <select class="form-select" value="@genderFilter"
                    @onchange="async (e) => { genderFilter = e.Value?.ToString() ?? string.Empty; await HandleSearch(); }">
                    <option value="">All Genders</option>
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </select>
                <select class="form-select" value="@countryFilter"
                    @onchange="async (e) => { countryFilter = e.Value?.ToString() ?? string.Empty; await HandleSearch(); }">
                    <option value="">All Countries</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country">@country</option>
                    }
                </select>
                <button class="btn btn-secondary" @onclick="ResetFilters">Reset</button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <p><em>Loading players...</em></p>
    }
    else
    {
        <div class="player-cards-container">
            @foreach (var player in filteredPlayers)
            {
                <div class="player-card">
                    <div class="player-card-header">
                        <h3>@player.Name</h3>
                        <span class="country-badge">@player.Country</span>
                    </div>
                    <div class="player-card-body">
                        <div class="player-info">
                            <div class="info-item">
                                <span class="info-label">Date of Birth:</span>
                                <span class="info-value">@player.DateOfBirth.ToString("yyyy-MM-dd")</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Gender:</span>
                                <span class="info-value">@player.gender</span>
                            </div>
                        </div>
                    </div>
                    <div class="player-card-footer">
                        <a href="@($"players/edit?id={player.Id}")" class="action-button edit-btn">Edit</a>
                        <a href="@($"players/details/{player.Id}")" class="action-button details-btn">Details</a>
                        <a href="@($"players/delete?id={player.Id}")" class="action-button delete-btn">Delete</a>
                    </div>
                </div>
            }
        </div>

        @if (!filteredPlayers.Any())
        {
            <div class="no-results">
                <p>No players found. Try a different search term.</p>
            </div>
        }
    }
</div>

@code {
    private TennisApp.Data.TennisAppContext dbContext = null!;
    private IQueryable<Player> playersQuery = null!;
    private List<Player> filteredPlayers = new List<Player>();
    private List<string> countries = new List<string>();
    private bool isLoading = true;
    private string searchQuery = "";
    private string genderFilter = "";
    private string countryFilter = "";

    protected override async Task OnInitializedAsync()
    {
        // Create a dedicated context that will live for the component's lifetime
        dbContext = await DbContextFactory.CreateDbContextAsync();

        // Create the query
        playersQuery = dbContext.Player.AsQueryable();

        // Load all players initially
        filteredPlayers = await playersQuery.ToListAsync();

        // Extract unique countries for the filter dropdown
        countries = await dbContext.Player
        .Select(p => p.Country)
        .Where(c => !string.IsNullOrEmpty(c))
        .Distinct()
        .OrderBy(c => c)
        .ToListAsync();

        isLoading = false;
    }

    private async Task HandleSearch()
    {
        IQueryable<Player> query = playersQuery;

        // Apply name search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            string searchLower = searchQuery.ToLower();
            query = query.Where(p => p.Name.ToLower().Contains(searchLower));
        }

        // Apply gender filter
        if (!string.IsNullOrWhiteSpace(genderFilter))
        {
            if (Enum.TryParse<Gender>(genderFilter, out var gender))
            {
                query = query.Where(p => p.gender == gender);
            }
        }

        // Apply country filter
        if (!string.IsNullOrWhiteSpace(countryFilter))
        {
            query = query.Where(p => p.Country == countryFilter);
        }

        // Execute the query
        filteredPlayers = await query.ToListAsync();
    }

    private async Task ResetFilters()
    {
        searchQuery = "";
        genderFilter = "";
        countryFilter = "";

        // Reset to show all players
        filteredPlayers = await playersQuery.ToListAsync();
    }

    public void Dispose()
    {
        // Make sure to dispose the context when the component is disposed
        dbContext?.Dispose();
    }
}